{
  "posts": [
    {
      "content": "数据库技术构成\r\n===\r\n\r\n数据库技术的出现是为了更加有效的管理和存取大量的数据资源。简单的来讲，数据库技术主要包括数据库系统，SQL语言，数据库访问技术。\r\n\r\n## 数据库系统\r\n\r\n数据库系统有3个主要的组成部分。\r\n\r\n### 数据库\r\n\r\n_数据库（Database System）：用于存储数据的地方。_\r\n\r\n### 数据库管理系统\r\n\r\n_数据库管理系统（Database Management System，DBMS）：用户管理数据库的软件。_\r\n\r\n### 数据库应用程序\r\n\r\n_数据库应用程序（Database Application）：为了提高数据库系统的处理能力所使用的管理数据库的软件补充。_\r\n\r\n\r\n## SQL语言\r\n\r\nSQL，(Structured Query Language)即结构化查询语言，数据库管理系统专门通过SQL语言来管理数据库中的数据，与数据库通信。\r\n\r\n### SQL的优点:\r\n\r\n- SQL不是某个特定数据库供应商专有的语言。几乎所有重要的DBMS都支持SQL，所以，学习此语言使你几乎能与所有数据库打交道。\r\n- SQL简单易学。它的语句全都是由描述性很强的英语单词组成，而且这些单词的数目不多。\r\n- SQL尽管看上去很简单，但它实际上是一种强有力的语言，灵活使用其语言元素，可以进行非常复杂和高级的数据库操作。\r\n\r\n> **DBMS专用的SQL**：SQL不是一种专利语言，而且存在一个标准委员会，他们试图定义可供所有DBMS使用的SQL语法，但事实上任意两个DBMS实现的SQL都不完全相同。本书讲授的SQL是专门针对MySQL的，虽然书中所讲授的多数语法也适用于其他DBMS，但不要认为这些SQL语法是完全可移植的。\r\n\r\n### SQL为数据库管理系统提供的功能\r\n\r\nSQL语言是一种数据库查询和程序设计语言，其主要用于存取数据、查询数据、更新数据和管理数据库系统。具体的，SQL分为4个部分，这里只是大概整理一下，详细的后面我会在SQL相关中仔细整理。\r\n\r\n- 数据定义语言（Data Definition Language，DDL）：DROP、CREATE、ALTER等语句；数据库定义语言。主要用于定义数据库、表、视图、索引和触发器等。CREATE语句主要用于创建数据库、创建表、创建视图。ALTER语句主要用于修改表的定义，修改视图的定义。DROP语句主要用于删除数据库、删除表和删除视图等。\r\n\r\n- 数据操作语言（Data Manipulation Language，DML）：INSERT、UPDATE、DELETE语句；数据库操作语言。主要用于插入数据，更新数据，删除数据。INSERT语句用于插入数据，UPDATE语句用于更新数据，DELETE语句用于删除数据。\r\n\r\n- 数据查询语言（Data Query Language，DQL）：SELECT语句。主要用于查询数据。\r\n\r\n- 数据控制语言（Data Control Language，DCL）：数据库控制语言。主要用于控制用户的访问权限。其中GRANT语句用于给用户增加权限，REVOKE语句用于收回用户的权限。\r\n\r\n数据库管理系统通过这些SQL语句可以操作数据库中的数据，在应用程序中，也可以通过SQL语句来操作数据。来几个 SQL 语句的例子，这条语句声明创建一个叫 user 的表：\r\n\r\n```sql\r\nCREATE TABLE `user` (\r\n  `id`     int(100) unsigned NOT NULL AUTO_INCREMENT,\r\n  `name`   varchar(32) NOT NULL DEFAULT '' COMMENT '姓名',\r\n  `sex`    tinyint(32) NOT NULL DEFAULT 0  COMMENT '性别：0,保密；1,男；2,女',\r\n  `mobile` varchar(20) NOT NULL DEFAULT '' COMMENT '手机',\r\n  PRIMARY KEY (`id`)\r\n);\r\n```\r\n\r\n这张表包含 4 个字段，分别为 id、name、sex、mobile，其中 id 定义为表的主键，并且只能为正数的自增长字段。并且字段 sex 有默认值 0，每个 COMMENT 后面均为字段注释。\r\n\r\n表定义好了，我们可以向这张表插入数据，下面这条语句是在 user 表中插入一条数据记录：\r\n\r\n```sql\r\nINSERT INTO `user` SET name=\"张三\",sex=1,mobile=13811772277;\r\nINSERT INTO `user` VALUES (18,'王小二',0,12322224);\r\n```\r\n\r\n上面两条语句执行完之后，user 表中就会相对应增加一行新记录，第一条该记录中 id 是自增长的，部分字段有初始默认值，所以只需插入部分值也是可以插入成功的。第二条是必须按顺序填写对应的值，表中的id 字段比较特殊，所以插入 id 值的时候必须比表中最后一条数据的 id 值大，否则会报错。\r\n\r\n插入数据之后我们再使用 SELECT 查询语句获取刚才插入的数据，如下：\r\n\r\n```sql \r\nmysql> SELECT * FROM `user`;\r\n\r\n-- +----+-----------+-----+-------------+\r\n-- | id | name      | sex | mobile      |\r\n-- +----+-----------+-----+-------------+\r\n-- |  1 | 张三      |   1 | 13811772277 |\r\n-- | 19 | 王小二    |   0 | 12322224    |\r\n-- +----+-----------+-----+-------------+\r\n```\r\n\r\n上面几条 SQL 语句的例子，大家看了之后会有一个印象，知道 SQL 语句语法是什么样子，后面有大量的 SQL 语句知识帮助你学习 SQL 语法，玩好 MySQL。\r\n\r\n\r\n## 数据库访问技术\r\n\r\n这个`数据库访问技术` 小弟认为这个是一个学术性的研究词汇，我在维基百科各种百科对这个词汇要么没有，要么就一句话解释，不知道谁想出的这个词汇，在下甚是佩服，初步了解到这个是个什么技术呢？\r\n\r\n不同的程序设计语言会有各自不同的数据库访问方法，这个访问方法称之为一种技术，程序语言通过这些技术，执行 SQL 语句，进行数据库的管理。下面搜集了一些主要的数据库访问技术\r\n\r\n### ODBC\r\n\r\nOpen Database Connectivity(ODBC，开放数据库互连)，提供了一种标准的API（应用程序编程接口）方法来访问数据库管理系统（DBMS）。这些API利用SQL来完成其大部分任务。ODBC本身也提供了对SQL语言的支持，用户可以直接将SQL语句送给ODBC。ODBC的设计者们努力使它具有最大的独立性和开放性：与具体的编程语言无关，与具体的数据库系统无关，与具体的操作系统无关。\r\n\r\n### ADO\r\n\r\n微软公司的 ActiveX Data Objects（ADO）是一个用于访问数据源的COM组件，作为高层的编程界面层。ADO是在OLE DB之上，包含了很多层次化的COM对象与集合（Collections，也是一类对象，在其里面包含了其他层级对象）。允许开发人员编写访问数据的代码而不用关心数据源是如何实现与访问驱动的，而只用关心到数据库的连接。访问数据库的时候，关于SQL的知识不是必要的，但是特定数据库支持的SQL命令仍可以通过ADO中的命令对象（Command）来执行。\r\n\r\n### MDAC\r\n\r\nMicrosoft Data Access Components（MDAC）是微软专门为数据访问功能而发展的应用程序开发接口，做为微软的统一化数据访问（Universal Data Access; UDA）解决方案的核心组成，最初的版本在1996年8月发表。目前其组成组件有ODBC，OLE DB以及ADO，其中ADO是在Visual Basic上唯一的数据访问管道，而OLE DB则是基于COM之上，供C/C++访问与提供数据的接口，ODBC则是统一化的数据访问API。\r\n\r\n### JDBC\r\n\r\nJava Database Connectivity（JDBC，Java数据库连接）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。JDBC是面向关系型数据库的。",
      "data": {
        "title": "MySQL数据库-1.2",
        "date": "2021-03-07 19:38:59",
        "tags": [
          "MySQL",
          "数据库"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "mysql-1.2"
    },
    {
      "content": "数据库基础\r\n===\r\n\r\n数据库(Database，DB)是按照数据结构来组织、存储和管理数据的建立在计算机存储设备上的仓库。\r\n\r\n简单来说是本身可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据进行新增、截取、更新、删除等操作。数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用。\r\n\r\n## 什么是数据库\r\n\r\n> 人们通常用数据库这个术语来代表他们使用的数据库软件。这是不正确的，它是引起混淆的根源。确切地说，数据库软件应称为`DBMS`(数据库管理系统)。数据库是通过 `DBMS` 创建和操纵的容器。数据库可以是保存在硬设备上的文件，但也可以不是。在很大程度上说，数据库究竟是文件还是别的什么东西并不重要，因为你并不直接访问数据库；你使用的是`DBMS`，它替你访问数据库。\r\n\r\n数据库指的是以一定方式储存在一起、能为多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合。简单来说可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据运行新增、截取、更新、删除等操作。\r\n\r\nRDBMS即关系数据库管理系统(Relational Database Management System)的特点：\r\n\r\n1. 数据以表格的形式出现\r\n2. 每行为各种记录名称\r\n3. 每列为记录名称所对应的数据域\r\n4. 许多的行和列组成一张表单\r\n5. 若干的表单组成database\r\n\r\n## 数据库分类\r\n\r\n数据库的分类可多了去了，在维基百科上面有下面这些数据库，并粗略的分了个类别。一看这里面的学问大了去了，还是先搬一些代表性的吧，长长见识，要深入了解各种概念推荐看《数据库系统概论》。\r\n\r\n### 关系数据库\r\n\r\n_（英语：Relational database），是创建在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。关系模型是由埃德加·科德于1970年首先提出的，并配合“科德十二定律”。现如今虽然对此模型有一些批评意见，但它还是数据存储的传统标准。标准数据查询语言SQL就是一种基于关系数据库的语言，这种语言执行对关系数据库中数据的检索和操作。_\r\n\r\n- MySQL\r\n  - MariaDB（MySQL的代替品，英文维基百科从MySQL转向MariaDB）\r\n  - Percona Server（MySQL的代替品）\r\n- PostgreSQL\r\n- Microsoft Access\r\n- Google Fusion Tables\r\n- SQL Server\r\n- FileMaker\r\n- Oracle\r\n- Sybase\r\n- dBASE\r\n- Clipper\r\n- FoxPro\r\n\r\n几乎所有的数据库管理系统都配备了一个开放式数据库连接（ODBC）驱动程序，令各个数据库之间得以互相集成。\r\n\r\n### 非关系型数据库（NoSQL）\r\n\r\n_NoSQL一词最早出现于1998年，是Carlo Strozzi开发的一个轻量、开源、不提供SQL功能的关系数据库。当代典型的关系数据库在一些数据敏感的应用中表现了糟糕的性能，例如为巨量文档创建索引、高流量网站的网页服务，以及发送流式媒体。关系型数据库的典型实现主要被调整用于执行规模小而读写频繁，或者大批量极少写访问的事务。_\r\n\r\n#### Key/value最终一致性存储\r\n\r\n- Apache Cassandra（为Facebook所使用）：高度可扩展\r\n- Dynamo\r\n- Hibari\r\n- Project Voldemort\r\n- Riak \r\n\r\n#### Key/value硬盘存储\r\n\r\n- LevelDB（Google）\r\n- BigTable\r\n- MemcacheDB\r\n- Tokyo Cabinet\r\n- Tuple space\r\n- TreapDB\r\n\r\n#### Key/value RAM存储\r\n\r\n- Oracle Coherence\r\n- memcached\r\n- Citrusleaf database\r\n- Velocity\r\n- **Redis**\r\n- Tuple space\r\n\r\n#### Key/value基于Paxos算法的存储\r\n\r\n- Keyspace\r\n\r\n## 数据库模型\r\n\r\n数据库模型描述了在数据库中结构化和操纵数据的方法，模型的结构部分规定了数据如何被描述（例如树、表等）。数据库模型的分类如下：\r\n\r\n- 对象模型\r\n- 层次模型（轻量级数据访问协议）\r\n- 网状模型（大型数据储存）\r\n- 关系模型\r\n- 面向对象模型\r\n- 半结构化模型\r\n- 平面模型（表格模型，一般在形式上是一个二维数组。如表格模型数据Excel)\r\n\r\n### 架构\r\n\r\n_数据库的架构可以大致区分为三个概括层次：内层、概念层和外层。_\r\n\r\n- 内层：最接近实际存储体，亦即有关数据的实际存储方式。\r\n- 外层：最接近用户，即有关个别用户观看数据的方式。\r\n- 概念层：介于两者之间的间接层。\r\n\r\n### 数据库索引\r\n\r\n数据索引的观念由来已久，像是一本书前面几页都有目录，目录也算是索引的一种，只是它的分类较广，例如车牌、身份证字号、条码等，都是一个索引的号码，当我们看到号码时，可以从号码中看出其中的端倪，若是要找的人、车或物品，也只要提供相关的号码，即可迅速查到正确的人事物。\r\n\r\n### 数据库操作：事务\r\n\r\n事务（transaction）是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分区的工作单位。 \r\n\r\n## 数据表\r\n\r\n关系数据库没有数据表，关键字、主键、索引等也就无从谈起，数据表是关系数据库中一个非常重要的对象，是其它对象的基础，也是一系列二维数组的集合，用来存储、操作数据的逻辑结构。根据信息的分类情况。一个数据库中可能包含若干个数据表，每张表是由行和列组成，记录一条数据数据表就增加一行，每一列是由字段名和字段数据集合组成，列被称之为字段，每一列还有自己的多个属性，例如是否允许为空、默认值、长度、类型、存储编码、注释等\r\n\r\n![MySQL](../img/data.jpg)\r\n\r\n**数据类型**\r\n\r\n在定义数据字段的类型对你的数据库的优化非常重要，数据类型决定了数据在计算机中的存储格式，代表不同的信息类型，大致可以分为：数值、日期/时间和字符串(字符)类型，字符串类型又包括二进制类型。\r\n\r\n上图中每一列就是一个字段，每个字段都有自己的类型，例如`name`列为字符串类型，`level` 列为数字类型。\r\n\r\n## 关系键\r\n\r\n_关系键是关系数据库的重要组成部分。关系键是一个表中的一个或几个属性，用来标识该表的每一行或与另一个表产生联系。一列(或一组列)，其值能够唯一区分表中每个行。_\r\n\r\n### 主键\r\n\r\n主键（primary key或unique key），又称主码，数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。unique 可空，可以在一个表里的一个或多个字段定义；primary key 不可空不可重复，在一个表里可以定义联合主键；unique索引和primary索引区别:\r\n\r\n1. primary key = unique + not null\r\n2. 唯一约束和主键一样都是约束的范畴，而且都可以作为外键的参考，不同的是，一张表只能有一个主键\r\n3. 主键和唯一约束的创建需要依靠索引，如果在创建主键或唯一约束的时候没有已经建好的索引可以使用的话，Oracle会自动建立一个唯一的索引。\r\n\r\n表中的任何列都可以作为主键，只要它满足以下条件: \r\n\r\n- unique 就是唯一，当你需要限定你的某个表字段每个值都唯一，没有重复值时使用。\r\n- 任意两行都不具有相同的主键值；\r\n- 每个行都必须具有一个主键值(主键列不允许NULL值)。\r\n\r\n除MySQL强制实施的规则外，应该坚持的几个普遍认可的最好习惯为:\r\n\r\n- 不更新主键列中的值；\r\n- 不重用主键列的值；\r\n- 不在主键列中使用可能会更改的值。(例如，如果使用一个名字作为主键以标识某个供应商，当该供应商合并和更改其名字时，必须更改这个主键。)\r\n\r\n### 超键\r\n\r\n超键（superkey），有的文献称“超码”，是在数据库关系模式设计中能够唯一标示多元组（即“行”）的属性集。包含所有属性的集叫做明显（平凡）超键。\r\n\r\n### 候选键\r\n\r\n在关系模型中，候选键或候选码（candidate key）是某个关系变量的一组属性所组成的集合，它需要同时满足下列两个条件：\r\n\r\n- 这个属性集合始终能够确保在关系中能唯一标识元组\r\n- 在这个属性集合中找不出真子集能够满足条件\r\n\r\n满足第一个条件的属性集合称为超键，因此我们也可以把候选键定义为“最小超键”，也就是不含有多余属性的超键。\r\n\r\n候选键的重要性是它们能够在关系中唯一标识出不同的元组，因此超键也是在设计数据库模式时需要指定的最重要的约束之一。由于在关系模型中，每个关系都是一个集合（没有重复的元素），所以每个关系都至少有一个候选键（因为所有属性组合必然是个超键）。但是在某些关系型数据库中表也能代表多重集，所以在每个关系中都显式地定义至少一个候选键是一条很重要的设计原则。数据库管理系统通常都需要将每个关系中的某个候选键定义为主键，亦即这个候选键是区分不同元组时首选的识别方式，例如外键通常就是引用主键而非其他候选键。\r\n\r\n### 外键\r\n\r\n外键（foreign key，台湾译作外来键），又称外部键。其实在关系数据库中，每个数据表都是由关系来连系彼此的关系，父数据表（Parent Entity）的主键（primary key）会放在另一个数据表，当做属性以创建彼此的关系，而这个属性就是外键。\r\n\r\n比如，学生跟老师之间是教学的关系，学生数据表会有个属性叫指导老师（FK），而这个值就是对应到老师数据表的老师代号（PK），学生的指导老师就是外键。\r\n\r\n### 代理键\r\n\r\n在关系型数据库设计中，代理键是在当数据表中的候选键都不适合当主键时，例如数据太长，或是意义层面太多，就会请一个无意义的但唯一的字段来代为作主键。\r\n\r\n代理键是：\r\n\r\n- Surrogate (1) – Hall, Owlett and Codd (1976)\r\n    一个代理键值确定了外部世界的一个实体。代理键值是数据库生成的，从来不显示给用户或应用程序看。\r\n- Surrogate (2) – Wieringa and De Jonge (1991)\r\n    一个代理键值确定了数据库中的一个对象。代理键值是数据库生成的，用户或应用程序看不到它。\r\n\r\n在实践中，代理键值通常是个自动递增的数字。在Sybase或SQL Server，用identity column标识代理键，PostgreSQL里用serial，Oracle里用SEQUENCE，在MySQL里用一个标记有AUTO_INCREMENT的字段。\r\n\r\n### 自然键\r\n\r\n自然键与代理键相反，它是在自然生活中唯一确定一个事物的标识。身份证号就是一个自然键，用于确定一个人。",
      "data": {
        "title": "MySQL数据库-1.1",
        "date": "2021-03-06 21:44:51",
        "tags": [
          "MySQL",
          "数据库"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "mysql-1.1"
    },
    {
      "content": "MySQL入门教程\r\n---\r\n\r\n## 目录\r\n\r\n#### Awesome MySQL\r\n\r\n- [21分钟MySQL基础入门](21-minutes-MySQL-basic-entry.md)\r\n- [手册文档](awesome-mysql.md#手册文档) - 一些非官方的手册文档搜集\r\n- [分析工具](awesome-mysql.md#分析工具) - 性能，结构和数据分析工具\r\n- [GUI](awesome-mysql.md#gui) - 搜集的一些 MySQL 的客户端，也有命令行客户端\r\n- [服务器](awesome-mysql.md#服务器) - MySQL服务器的衍生品\r\n- [备份](awesome-mysql.md#备份) - 备份/存储/恢复 工具\r\n- [官方资料](awesome-mysql.md#官方资料) - 官方的一些网站和文章\r\n- [优秀文章](awesome-mysql.md#优秀文章) - 一些优秀的文章\r\n\r\n#### 第1章 初识MySQL\r\n\r\n- 1.1 [数据库基础](http://zzcblog.asia/post/mysql-1.1/)\r\n    - 什么是数据库\r\n    - 数据库分类\r\n    - 数据库模型\r\n    - 数据表\r\n    - 关系键\r\n- 1.2 [数据库技术构成](http://zzcblog.asia/post/mysql-1.2/)\r\n    - 数据库系统\r\n    - 关系数据库基本概念\r\n    - SQL语言\r\n    - 数据库访问技术\r\n- 1.3 [什么是MySQL](mysql/chapter1/1.3.md)\r\n    - [MySQL介绍](mysql/chapter1/1.3.md#mysql-介绍)\r\n    - [MySQL发展历史](mysql/chapter1/1.3.md#mysql-发展历史)\r\n    - [MySQL版本](mysql/chapter1/1.3.md#mysql-版本)\r\n    - [MySQL的优势](mysql/chapter1/1.3.md#mysql-的优势)\r\n- 1.4 [如何学习MySQL](mysql/chapter1/1.4.md)\r\n\r\n#### 第2章 MySQL的安装与配置\r\n\r\n- 2.1 [Mac平台下安装与配置MySQL](mysql/chapter2/2.1.md)\r\n    - [Mac上安装MySQL](mysql/chapter2/2.1.md#mac-安装mysql)\r\n    - [Mac上卸载MySQL](mysql/chapter2/2.1.md#mac-卸载mysql)\r\n- 2.2 [Centos 平台安装与卸载MySQL](mysql/chapter2/2.2.md)\r\n    - [检查是否已安装](mysql/chapter2/2.2.md#检查是否已安装)\r\n    - [更新安装源](mysql/chapter2/2.2.md#更新安装源)\r\n    - [检查是否下载成功](mysql/chapter2/2.2.md#检查是否下载成功)\r\n    - [查看版本](mysql/chapter2/2.2.md#查看版本)\r\n    - [启动指定版本](mysql/chapter2/2.2.md#启动指定版本)\r\n    - [安装MySQL](mysql/chapter2/2.2.md#安装mysql)\r\n    - [查看安装目录](mysql/chapter2/2.2.md#查看安装目录)\r\n    - [MariaDB切换MySQL](mysql/chapter2/2.2.md#mariadb切换mysql)\r\n    - [卸载 MySQL 软件](mysql/chapter2/2.2.md#卸载-mysql-软件)\r\n- 2.3 [Docker 安装 MySQL](mysql/chapter2/2.3.md)\r\n    - [快速启动一个 MySQL 服务器实例](mysql/chapter2/2.3.md#快速启动一个-mysql-服务器实例)\r\n    - [通过命令行访问 MySQL 容器](#通过命令行访问-mysql-容器)\r\n    - [使用 MySQL 自定义配置文件](#使用-mysql-自定义配置文件)\r\n    - [使用 stack 部署 MySQL](#使用-stack-部署-mysql)\r\n- 2.4 [启动数据库设置初始密码](mysql/chapter2/2.4.md)\r\n    - [命令行启动关闭重启MySQL服务](mysql/chapter2/2.4.md#命令行启动关闭重启mysql服务)\r\n    - [图像界面启动关闭重启MySQL服务](mysql/chapter2/2.4.md#图像界面启动关闭重启mysql服务)\r\n    - [查看初始密码](mysql/chapter2/2.4.md#查看初始密码)\r\n    - [设置初始化密码](mysql/chapter2/2.4.md#设置初始化密码)\r\n    - [启动报错处理](mysql/chapter2/2.4.md#启动报错处理)\r\n- 2.5 [MySQL工具](mysql/chapter2/2.5.md)\r\n    - [命令行使用程序](mysql/chapter2/2.5.md#命令行使用程序)\r\n    - [MySQL Workbench客户端](mysql/chapter2/2.5.md#mysql-workbench客户端)\r\n    - [常用图形管理工具](mysql/chapter2/2.5.md#常用图形管理工具)\r\n    - [MyCli替代MySQL的mysql命令行工具](mysql/chapter2/2.5.md#mycli替代mysql的mysql命令行工具)\r\n- 2.6 [MySQL配置修改](mysql/chapter2/2.6.md)\r\n    - [MySQL安装目录说明](mysql/chapter2/2.6.md#mysql安装目录说明)\r\n    - [配置文件的位置](mysql/chapter2/2.6.md#配置文件的位置)\r\n    - [Windows系统配置文件读取](mysql/chapter2/2.6.md#windows系统配置文件读取)\r\n    - [Linux系统配置文件读取](mysql/chapter2/2.6.md#linux系统配置文件读取)\r\n    - [配置文件内容](mysql/chapter2/2.6.md#配置文件内容)\r\n\r\n#### 第3章 数据库的基本操作\r\n\r\n- 3.1 [连接数据库](mysql/chapter3/3.1.md)\r\n    - [MySQL命令语法](mysql/chapter3/3.1.md#mysql命令语法)\r\n    - [MySQL命令连接数据库](mysql/chapter3/3.1.md#mysql命令连接数据库)\r\n    - [开启MySQL的远程帐号](mysql/chapter3/3.1.md#开启mysql的远程帐号)\r\n    - [MySQL修改密码](mysql/chapter3/3.1.md#mysql修改密码)\r\n- 3.2 [查看选择数据库](mysql/chapter3/3.2.md)\r\n    - [查看数据库](mysql/chapter3/3.2.md#查看数据库)\r\n    - [选择数据库](mysql/chapter3/3.2.md#选择数据库)\r\n- 3.3 [创建数据库](mysql/chapter3/3.3.md)\r\n    - [SQL语句创建数据库](mysql/chapter3/3.4.md#sql语句创建数据库)\r\n    - [管理工具创建数据库](mysql/chapter3/3.4.md#管理工具创建数据库)\r\n- 3.4 [删除数据库](mysql/chapter3/3.4.md)\r\n    - [SQL语句删除数据库](mysql/chapter3/3.4.md#sql语句删除数据库)\r\n    - [管理工具删除数据库](mysql/chapter3/3.4.md#管理工具删除数据库)\r\n- 3.5 [数据库存储引擎](mysql/chapter3/3.5.md#)\r\n    - [存储引擎简介](mysql/chapter3/3.5.md#存储引擎简介)\r\n    - [常用引擎对比](mysql/chapter3/3.5.md#常用引擎对比)\r\n    - [查看存储引擎](mysql/chapter3/3.5.md#查看存储引擎)\r\n    - [设置存储引擎](mysql/chapter3/3.5.md#设置存储引擎)\r\n    - [如何选择合适的存储引擎](mysql/chapter3/3.5.md#如何选择合适的存储引擎)\r\n\r\n#### 第4章 数据表的基本操作\r\n\r\n- 4.1 创建数据表\r\n\r\n#### 第5章 数据类型和运算符\r\n\r\n#### 第6章 MySQL函数\r\n\r\n#### 第7章 查询数据\r\n\r\n#### 第8章 插入、更新与删除数据\r\n\r\n#### 第9章 索引\r\n\r\n#### 第10章 存储过程和函数\r\n\r\n#### 第11章 视图\r\n\r\n#### 第12章 MySQL函数\r\n\r\n#### 第13章 MySQL用户管理\r\n\r\n#### 第14章 数据备份与还原\r\n\r\n#### 第15章 MySQL日志\r\n\r\n#### 第16章 性能优化\r\n\r\n#### 第17章 各种问题解决\r\n\r\n- [让MySQL支持emoji图标存储](mysql/chapter17/17.1.md)\r\n- [Centos6下升级MySQL数据库](mysql/chapter17/17.2.md)\r\n- [MySQL修改密码](mysql/chapter17/17.3.md)\r\n    - [mysqld_safe不存在修改密码](mysql/chapter17/17.3.md#mysqld_safe不存在修改密码)\r\n    - [启动修改丢失的mysql单实例root密码方法](mysql/chapter17/17.3.md#启动修改丢失的mysql单实例root密码方法)\r\n    - [Mac下重置MySQL的root密码](mysql/chapter17/17.3.md#Mac下重置MySQL的root密码)\r\n    - [不重启mysqld修改密码的方法](mysql/chapter17/17.3.md#不重启mysqld的方法)\r\n- [Centos7 默认为MariaDB导致mysql安装不上](mysql/chapter2/2.2.md#centos7安装mysql)\r\n- [mysql命令不存在](mysql/chapter2/2.1.md#mysql命令不存在)\r\n- [MySQL服务启动失败解决方案](mysql/chapter2/2.3.md#linux-下命令操作)\r\n- [密码不满足当前的策略要求导致无法开启远程帐号](mysql/chapter3/3.1.md#开启mysql的远程帐号)",
      "data": {
        "title": "MySQL数据库-0",
        "date": "2021-03-06 20:49:24",
        "tags": [
          "数据库",
          "MySQL"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "mysql-0"
    }
  ],
  "tags": [
    {
      "name": "MySQL",
      "slug": "QdRjJSdHMh",
      "used": true
    },
    {
      "name": "数据库",
      "slug": "q8L-kPqZR",
      "used": true
    },
    {
      "name": "mySql",
      "slug": "XPMpiYX5lz",
      "used": false
    },
    {
      "name": "Gridea",
      "slug": "w4NFlasaX",
      "used": false
    }
  ],
  "menus": [
    {
      "link": "/",
      "name": "首页",
      "openType": "Internal"
    },
    {
      "link": "/archives",
      "name": "归档",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "标签",
      "openType": "Internal"
    }
  ]
}